.global main
.func main
   
main:
    BL  _scanf              @ branch to scanf procedure with return
    VMOV S0, R0             @ move return value R0 to FPU register S0
    BL _scanf
    VMOV S1, R0             @ move return value R0 to FPU register S0
    VCVT.F32.S32 S0, S0     @ covert the result to double precision for printing
    VCVT.F32.S32 S1, S1     @ covert the result to double precision for printing
    VDIV.F32 S3, S0, S1     @ compute S3 = S0 / S1
    VCVT.F64.F32 D4, S3     @ covert the result to double precision for printing
    VMOV R1, R2, D4
    BL  _printf             @ branch to print procedure with return
    B main               

_printf:
    PUSH {LR}               @ push LR to stack
    LDR R0, =printf_str     @ R0 contains formatted string address
    BL printf               @ call printf
    POP {PC}                @ pop LR from stack and return
    
_scanf:
    PUSH {LR}               @ store LR since scanf call overwrites
    SUB SP, SP, #4          @ make room on stack
    LDR R0, =format_str     @ R0 contains address of format string
    MOV R1, SP              @ move SP to R1 to store entry on stack
    BL scanf                @ call scanf
    LDR R0, [SP]            @ load value at SP into R0
    ADD SP, SP, #4          @ restore the stack pointer
    POP {PC}                @ return

.data
format_str:     .asciz      "%d"
printf_str:     .asciz      "%f   \n"

